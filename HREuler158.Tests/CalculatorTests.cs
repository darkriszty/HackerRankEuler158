using HackerRankEuler158;
using NUnit.Framework;
using System.Linq;

namespace HREuler158.Tests
{
	[TestFixture]
	public class CalculatorTests
	{
		[TestCase(2, 1, 0, ExpectedResult = "2")]
		[TestCase(2, 2, 0, ExpectedResult = "1")]
		[TestCase(2, 2, 1, ExpectedResult = "1")]
		[TestCase(26, 3, 1, ExpectedResult = "10400")]
		[TestCase(26, 4, 1, ExpectedResult = "164450")]
		public string MaxPValue_ReturnsExpectedValue(int N, int n, int m)
		{
			return Calculator.MaxPValue(N, n, m).ToString();
		}

		[TestCase(2, new[] { 0, 1 }, ExpectedResult = "3")]
		[TestCase(26, new[] { 1 }, ExpectedResult = "409511334375")]
		[TestCase(370, new[] { 113 }, ExpectedResult = "1129486192863670815372730620783152644645169144247331854650104890934035038415521631432743889282750822808904404152554392419100015462010749396855372214202134439383005223993275853659632338481662941604983330613726645748743220498005100211093730252494710152488313297130400883899674846529159641866613001987231791119378875444258492747772042912756321688460087879204313606440801985809559552544736627756954418383722891987501053820677434636345597889080568477548141061047068163094255641064091257005512102976283023161469868080296772380837979049654271185843505158957683435991574363104033686113208248875901951735636904366399852613949380041396808107903157018417249032123262350144516972365274229892284882967614181398937449987742209157797396847422776501855821264609860903760")]
		[TestCase(700, new[] { 351, 555, 444, 666, 2, 12, 57, 112, 180, 239 }, ExpectedResult = "123986226605118387266001031440082394135830592581510374453845500731740930737290548608163579321152968155540152927128478389354388786806625744267766713938511930762262780721280259881587418611330776806618472443906498760458475163395477558435739086661022124572258390118340216313636116239279332155852846541853337272956556887792226296476496776008176059171935019441574353721259867191669657211687691226118374521490179594286400898881757687283517498913904402924495868009811173982513794438539835043558321369173101561579677804891264451829613612072834150396306190466308139143578297029338841632174533330522516260654287280415044480743306243905701114222953216536413951798022331351380833690128775944360119904683996067650147709078183448859197191498877659244976539143338985648119279947815257305683069978396107901082739206590055955149380902248130221213553614382403351851513812064146863067640506571820314543521606027744405183307207237377155301415299080339049877323341293319923354253569433014004861190733680176278983240729651856538941485665498997260534303613435844225261181998489332703208789918351903340019947707247276242510250158450650771885783843355750830383228401541677393331662383724907784792159196921511592894481584422294795425930633791641138563603833158251435912544890748419028909005276155824231643074582449173227446010848196352486944371083451720051609434688994185569197913813984868229786913261958507710174620760230063029442910089326614663815598179340377280196348435437731083620756750951536852460948217079553793899942134635725782213260332709126528187123538619972576975939620030008045827293221792545135467585944901069914203222496645478996991606919174741727099678445179442924742185867939973089290971962508521030")]
		[TestCase(699, new[] { 698, 0, 666, 1, 599, 13, 499, 21, 389, 35, 301, 45, 285, 55, 210, 68, 189, 75, 150, 88, 130, 94, 109, 100 }, ExpectedResult = "192295724086212749084547724039879157640750941179422925817950312266650214860960406379085639003925508390664890107821244931007715423728903118075476457844698284674728309048971372827067883231601168786142889119089816058898611386707201712884578256325614856489298769306758374560714822292817081628728680464265435404780856653286461435590714089492861113284250832399549040987307233622757270289080911709320834277036442592242805176385001182353977336416922166767594867915131796148114737954251072103273386860365276699708303959927354483558235007985259869072557340115339640586986052171845372497505360655263950100040689359933649392935424128859611757832007394995506858601567966368197063710182439778135107827197575342130393471812878202470532915819674288052150023929937995807557637346336374662039639539735547260367454612787473629886259902220499315716046912377921590130636920874067138089935584881604776644246912805165822729793733236291938765625682004614021907044757636620625508137976707970087266188291849501900301329182642244254773417948724364133788411951424737402343094443675461129996722503607898670351036173670951232823174095057203467365009166929675810247552344830982701185601221306324646594579330485613689669992441471118652597582879097931657536094688391316687634966069738227881972585328895204211437685059993686573300815237838192204688212601773833920926962372379231328901046081988302089384441677841885069369076690871794736483642223130001858783840331138991707908746997942472848661101368109039357608300789057646301783576815649182027709561676100276850210026777199004584382270579789172681526324651742170017663993660500708785337702089958692896165447566085749432130056650134140649478482795896742110801434536")]
		[TestCase(698, new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }, ExpectedResult = "37389843307195755434668607749629583250085725961870269977090303927620382841418313536722518527881046381784905570977973102232174393412017370529224673658112784672244789415283148729275212900374431825144836265265562999857640517494324250095548324005506832344336952918972628634445429362085599137854140283297231746359502488314092226322905492085183170415103810855239418696974524035067757315198268274820468550898726804895070554332229276366954473607322761470031103637592172439416319966758015105637345397805212722227416317272390237263174858620836628704953586603151949512219634251231200897773925286084821658067279208266177904251516447143096479701041450301415245893411550178608089371949808595588603688123048510685652215346243011736760958280080061590082120178575379609735004606699186663140953208904561865440781060957230113766525885624875310941969230218642348265154389286342681882200204290604511495255598801399463461895706763369257211473340605369200179053452860432032349057554664106633449425054803491257367672819007390826290078867979705081202739993553007255313370731600042066350973391406076674801698102173346210")]
		[TestCase(697, new[] { 698, 0, 666, 1, 599, 13, 499, 21, 389, 35, 301, 45, 285, 55, 210, 68, 189, 75, 150, 88, 130, 94, 109, 100, 351, 555, 444, 666, 2, 12, 57, 112, 180, 239 }, ExpectedResult = "343289073698522599333645982220683209315270054160129491457650101905885731296830916962399795881566125374111883149326027744283178334454082401153384081917016144646972060263498087640529220107916892241391882119651953048998849992586570193366202260100367569360122914023629094521050340257229382867075126397424751389904988540133385847796677972186686029056393548222668996861942334696983026092973098791608199773528391528300405839213900769451929593429965723374450340096735307868877712740210145045170308295783937194272320642511155387607429682359444343519714671683816683697894736920287799454685032227294126937304242607594148830436665588818700972422941577879794119625142244905365619274192642050806504791297052031352181920211407611976926721171628905498225463026959758178578256848311652860454624172586614664909093121675300072297833280555460575358749262690247463501703049734481824809059170602730088385730563792800959454205311268061114904757149762472534040723724264794322103824085049580511676834547673036116675094592810257664859824473987245357177733601003300797512174499850687673042742627619600728853616146488873753023411724095631894500622536551626367412236230013850525415569108110130553982861861339435929303012300666555184160483065125910714587248175702218178090609056050180261226710991970701189729598602251354122915428591192119398672789974048777413377707621274569715712851581645124766014265288720864328800421149929937625987649441746792068759171796247220323265321875223391853636235901430724083492410909870864633040510494513079308386540709247987352377445151666176501399493132988392636194019653113594740066310874467479469429693634087874550913575129700772195325176758419663794733849701368877035801446798")]
		[TestCase(696, new[] { 698, 0, 666, 1, 599, 13, 499, 21, 389, 35, 301, 45, 285, 55, 210, 68, 189, 75, 150, 88, 130, 94, 109, 100, 351, 555, 444, 666, 2, 12, 57, 112, 180, 239, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }, ExpectedResult = "479236338861276765952412599606462620791386064559162382285457704991368302906344046739544705306409535605526563155840795150035736404551092054116012535947976167363029308154212844517778448158762607795930966236142585922787737910347737764147832142885332079658923987362513898906386460288404223733691016911223472638413161518293925816549786977916275256398337155623603899674252216675855156828220044761748387948800861361613760090881619278230398785509140882787333141604195018153666123958099771805722223979168322762346976409301130330203916856746707564373172860408390054466582120180783490164703295335909655841022955501764430400818787012191990242330015883446006260714099019873621034819062628085643987415847827785764564479140135488034233743056500672979179507436657386420618485554317020403777088117444698109069969413289817925098014997970803069768177272951740742851973340610128222788475441833543258692627946613809733010834383959837160421108748424847778352449937511020203128310671632785299603199845353637132473976339928615151174741772423181289914859886440172881494352741526090502525621308014082614031985063175769524122803287848153071156483026695422413363727566724590502641237945794681812064915124753811613250454746344276658562748027779283577750493819140500608256792981941414804520611862446856238714997129605571946779149404315579897040557335165706555769581203109657299024252433866987969185047855764175800181337537490423123432011735982140895841430240225618377591865754011268387278582559749557005365190659916981815105770696530050726404612474501229649476122065580350036761647586279223049747754768469588645815636469522968390999968234757336926041934144522113676124360037503630160962408977598020144187211")]
		[TestCase(400, null, ExpectedResult = "66246048353954120435566405086330416458577483878920983090742177922519138609258162479473732699143085503054627523077972990164823423058138527130381513276232253253066905071614648355681150136321641341098384116492631435641755688619065580814490351744665549751919718091045709422868796791224500873274829524067422154396592517742473691126114479249148455650117603131824591221864011887551211040377016314991589302991110139325559250619079958043992355825261964788750382829665129484297287705800271212349169853022538941128357364150118926461581396573031745873745125746075693199782388367400223920984338174585114485782044485190393555986365276440802965008621911726089157066318700531571032736564029866465631524311348984314518445353510043219538025298830434559440992331836743576251516944846564523077166896698086310121243023980144950249083601412774851223339413638316513282148031465746673972298846")]
		[MaxTime(3000)]
		public string SumOfMaxes_ReturnsExpectedValue(int alphabetSize, int[] neighbourDifferenceInChars)
		{
			neighbourDifferenceInChars = neighbourDifferenceInChars ?? Enumerable.Range(0, alphabetSize).ToArray();
			var input = new InputModel
			{
				AlphabetSize = alphabetSize,
				NumberOfQueries = neighbourDifferenceInChars.Length,
				NumberOfCharactersLexicographicallyComingAfterNeighbours = neighbourDifferenceInChars
			};

			var sum = Calculator.SumOfMaxes(input);

			return sum.ToString();
		}
	}
}
